
MuscleSensorSerialCom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000257  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000019d  00000000  00000000  0000048f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a0  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ff  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000080  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000acb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  78:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initUSART>:
#include <util/delay.h>
#include <util/setbaud.h>

void initUSART(void)
{
	UBRR0H = UBRRH_VALUE;
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	  UCSR0A |= (1 << U2X0);
	#else
	  UCSR0A &= ~(1 << U2X0);
  8a:	e0 ec       	ldi	r30, 0xC0	; 192
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	8d 7f       	andi	r24, 0xFD	; 253
  92:	80 83       	st	Z, r24
	#endif

	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  94:	88 e1       	ldi	r24, 0x18	; 24
  96:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); //8 Data bits one stop bit
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	80 93 c2 00 	sts	0x00C2, r24
  a0:	08 95       	ret

000000a2 <transmitByte>:
}

void transmitByte(uint8_t data)
{
	while ((UCSR0A & (1<<UDRE0)) == 0); //Waiting for empty transfer buffer
  a2:	e0 ec       	ldi	r30, 0xC0	; 192
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	95 ff       	sbrs	r25, 5
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <transmitByte+0x4>
	UDR0 = data;
  ac:	80 93 c6 00 	sts	0x00C6, r24
  b0:	08 95       	ret

000000b2 <initADC>:
}

void initADC (void) 
{
	ADMUX |= (1<<REFS0);
  b2:	ac e7       	ldi	r26, 0x7C	; 124
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	8c 91       	ld	r24, X
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8c 93       	st	X, r24
	
	ADCSRA |= ((1<<ADPS2) | (1<<ADPS1) | (ADPS0));
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24
	
	//From example in class this should correlate to pc5/analog in 5 Multiple inputs in 147
	ADMUX |= ((1<<MUX2) | (1<<MUX0));
  c6:	8c 91       	ld	r24, X
  c8:	85 60       	ori	r24, 0x05	; 5
  ca:	8c 93       	st	X, r24
	
	//Power on ADC
	ADCSRA |= (1<<ADEN);
  cc:	80 81       	ld	r24, Z
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <readADC>:
}

uint16_t readADC (void)
{
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	2c 97       	sbiw	r28, 0x0c	; 12
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
	uint8_t channel;
	uint16_t adcValues[6];
	uint16_t *p;
	
	for (channel = 0; channel < 6; channel++) {
  f0:	60 e0       	ldi	r22, 0x00	; 0
		ADMUX = (0xf0 & ADMUX) | channel; // set channel
  f2:	0c e7       	ldi	r16, 0x7C	; 124
  f4:	10 e0       	ldi	r17, 0x00	; 0
		
		ADCSRA |= (1 << ADSC); // start next conversion
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
		
		//Wait until the conversion is done/ADSC == 0
		while (!((ADCSRA & (1<<ADSC)) == 0));
		
		adcValues[channel] = ADC; // store the value in array
  fa:	48 e7       	ldi	r20, 0x78	; 120
  fc:	50 e0       	ldi	r21, 0x00	; 0
	uint8_t channel;
	uint16_t adcValues[6];
	uint16_t *p;
	
	for (channel = 0; channel < 6; channel++) {
		ADMUX = (0xf0 & ADMUX) | channel; // set channel
  fe:	d8 01       	movw	r26, r16
 100:	2c 91       	ld	r18, X
 102:	20 7f       	andi	r18, 0xF0	; 240
 104:	26 2b       	or	r18, r22
 106:	2c 93       	st	X, r18
		
		ADCSRA |= (1 << ADSC); // start next conversion
 108:	20 81       	ld	r18, Z
 10a:	20 64       	ori	r18, 0x40	; 64
 10c:	20 83       	st	Z, r18
		
		//Wait until the conversion is done/ADSC == 0
		while (!((ADCSRA & (1<<ADSC)) == 0));
 10e:	20 81       	ld	r18, Z
 110:	26 fd       	sbrc	r18, 6
 112:	fd cf       	rjmp	.-6      	; 0x10e <readADC+0x3a>
		
		adcValues[channel] = ADC; // store the value in array
 114:	da 01       	movw	r26, r20
 116:	2d 91       	ld	r18, X+
 118:	3c 91       	ld	r19, X
 11a:	dc 01       	movw	r26, r24
 11c:	2d 93       	st	X+, r18
 11e:	3d 93       	st	X+, r19
 120:	cd 01       	movw	r24, r26
{
	uint8_t channel;
	uint16_t adcValues[6];
	uint16_t *p;
	
	for (channel = 0; channel < 6; channel++) {
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	66 30       	cpi	r22, 0x06	; 6
 126:	59 f7       	brne	.-42     	; 0xfe <readADC+0x2a>
	}
	
	p = adcValues;
	
	return(p);
}
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	2c 96       	adiw	r28, 0x0c	; 12
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <main>:
	uint16_t *d;
	
	//Set analog input pins to input
	//DDRC = 0b00000000;
	
	initUSART();
 142:	0e 94 40 00 	call	0x80	; 0x80 <initUSART>
	initADC();
 146:	0e 94 59 00 	call	0xb2	; 0xb2 <initADC>
	
    while(1)
    {
        p	= readADC();
 14a:	0e 94 6a 00 	call	0xd4	; 0xd4 <readADC>
		
		*d = *(p+5);
		
		//Should take the last 8 bits of data from the 16 bit ADC
		//d = p + 5;
		*d = 0b11111111 & temp;
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	fc 01       	movw	r30, r24
 154:	11 82       	std	Z+1, r1	; 0x01
 156:	10 82       	st	Z, r1
		else if ((temp > 0b01000000) && (temp <= 0b0000000010111000)) { this = 50; }
		else { this = 126; } //Greater and 128
		
		//transmitByte(this);
		
		transmitByte(d);
 158:	0e 94 51 00 	call	0xa2	; 0xa2 <transmitByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	ff ef       	ldi	r31, 0xFF	; 255
 15e:	24 e3       	ldi	r18, 0x34	; 52
 160:	8c e0       	ldi	r24, 0x0C	; 12
 162:	f1 50       	subi	r31, 0x01	; 1
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x20>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x2a>
 16c:	00 00       	nop
 16e:	ed cf       	rjmp	.-38     	; 0x14a <main+0x8>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
